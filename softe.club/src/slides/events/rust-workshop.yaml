title: Rust Workshop
slides:
  - type: title
    title: Rust Crash Course
    subtitle: Install Rust from rust-lang.org, or use repl.it
  - content: |
      # What will we be talking about?
      - Syntax Quirks
      - Borrowing/Ownership System
      - Structs and Traits
      - Match Statement
  - type: title
    title: Syntax Quirks
  - content: |
      # Variables
      All variables are constant by default.
      ```rust
      fn main() {
        let a = 5;
        a += 5; // doesn't work
      }
      ```
      `mut` makes things mutable
      ```rust
      fn main() {
        let mut a = 5;
        a += 5;
      }
      ```
  - content: |
      # Implicit Returns
      The `return` statement is not always required.
      ```rust
      fn a() {
        5 // note that there's no semi colon
      }
      ```
      is equivalent to
      ```rust
      fn a() {
        return 5;
      }
      ```

  - type: title
    title: Borrowing System
  - content: |
      # What and Why?
      - For memory management
      - Lets the compiler know what memory is and isn't being used and where
      - AKA Ownership

      # Ownership Rules
      *Directly from the Rust Book*
      - Each value in Rust has a variable thatâ€™s called its owner.
      - There can only be one owner at a time.
      - When the owner goes out of scope, the value will be dropped.
  - content: |
      # Move by Default

      Most other languages are copy by default, meaning the reference or value is copied when you assign a value to a new variable.

      Value is copied:
      ```python
      s1 = "hello"
      s2 = s1
      s2 += " world"
      print(s1) // prints hello
      ```
      Reference is copied:
      ```python
      o = {"msg": "hello"}
      o2 = o
      o2["msg"] += " world"
      print(o["msg"]) // prints hello world
      ```

      Rust does not work this way.

  - content: |
      # Move by Default

      Most other languages are copy by default, meaning the reference or value is copied when you assign a value to a new variable.

      <iframe height="500px" width="100%" src="https://repl.it/@dyc3/Rust-workshop-sample-1-python-copy-ref?lite=true" scrolling="no" frameborder="no" allowtransparency="true" allowfullscreen="true" sandbox="allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals"></iframe>

      Rust does not work this way.
  - content: |
      # Move by Default

      Rust doesn't let you copy references to new variables.

      Will this compile? <!-- No -->

      ```rust
      fn main() {
        let s1 = String::from("hello");
        let s2 = s1;

        println!("{}, world!", s1);
      }
      ```
  - content: |
      # Move by Default

      Rust doesn't let you copy references to new variables.

      Will this compile? <!-- No -->

      <iframe height="600px" width="100%" src="https://repl.it/@dyc3/Rust-workshop-sample-2-Move-by-default?lite=true" scrolling="no" frameborder="no" allowtransparency="true" allowfullscreen="true" sandbox="allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals"></iframe>

  - content: |
      # Borrowing Example

      ```rust
      fn borrow_i32(b: &i32) {
        println!("Borrowed: {}", b)
      }

      fn borrow_mut_i32(b: &mut i32) {
        println!("Modifying borrowed: {} * 2", b);
        *b *= 2i32;
      }

      fn eat_i32(b: Box::<i32>) {
        println!("Eaten: {:?}", b)
      }

      fn main() {
        let mut a = Box::new(5i32);
        borrow_i32(&a);
        borrow_mut_i32(&mut a);
        eat_i32(a);
        // a can no longer be used
      }
      ```
  - content: |
      # Borrowing Example
      <iframe height="700px" width="100%" src="https://repl.it/@dyc3/Rust-workshop-sample-3-borrowing-system?lite=true" scrolling="no" frameborder="no" allowtransparency="true" allowfullscreen="true" sandbox="allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals"></iframe>
  - content: |
      # Borrowing Example
      You don't have to do it all the time.
      If a type implements the Copy trait, then it can be moved multiple times safely because it creates a shallow copy of the value.
      ```rust
      fn copy_i32(b: i32) {
        println!("Not Eaten: {:?}", b)
      }

      fn main() {
        let a = 5i32;
        copy_i32(a);
        copy_i32(a);
        copy_i32(a);
        copy_i32(a);
      }
      ```

  - content: |
      # Interactive segment
      Make a new project so you can follow along!

      Create a new library project with:
      ```bash
      cargo new --lib pokelib
      ```
      or make a new Rust repl on https://repl.it.
    sticky: struct-impl
  - type: title
    title: Structs and Traits
  - content: |
      # Structs
      There are no classes, only structs.

      ```rust
      pub enum PokemonType {
        Water,
        Fire,
        Grass,
      }
      pub struct Pokemon {
        id: u16,
        name: String,
        ptype: PokemonType,
      }
      pub fn get_all_pokemon() -> [Pokemon; 3] {
        [
          Pokemon{id:1, name:String::from("Bulbasaur"), ptype: PokemonType::Grass},
          Pokemon{id:4, name:String::from("Charmander"), ptype: PokemonType::Fire},
          Pokemon{id:7, name:String::from("Squirtle"), ptype: PokemonType::Water},
        ]
      }
      ```
  - name: struct-impl
    content: |
      # Structs
      Structs can implement their own methods like classes, but the definitions are separate.

      *Note that Rust knows what type `self` is automatically!*
      ```rust
      impl Pokemon {
        fn get_name(self) -> String {
          self.name
        }
      }
      ```
  - content: |
      # Traits
      Let's start implementing `get_damage_multiplier()`. Super effective matchups get 2x damage, not very effective matchups get 0.5x damage.

      ```rust
      pub fn get_damage_multiplier(move_type: PokemonType, opponent_type: PokemonType) -> f32 {
        use PokemonType::*;
        if move_type as i32 == Water as i32 {
          if opponent_type as i32 == Fire as i32 {
            return 2f32;
          }
        }
        1f32
      }
      ```

      ...We can already see a few problems here.
      - This is a lot of code
      - Adding another case for grass type opponents doesn't work, because `opponent_type` is moved
  - content: |
      # Traits
      We can get rid of the casts by implementing the `PartialEq` trait.

      Rust can implement the `PartialEq` trait automatically using the `derive` attribute.

      Let's go ahead and derive `Clone`, and `Copy` too.

      ```rust
      #[derive(PartialEq, Clone, Copy)]
      pub enum PokemonType {
        Water,
        Fire,
        Grass,
      }
      ```

      Now we can compare like this:

      ```rust
      move_type == PokemonType::Water
      ```
  - content: |
      # Traits

      We can now add more comparisons without running into borrowing problems.

      ```rust
      pub fn get_damage_multiplier(move_type: PokemonType, opponent_type: PokemonType) -> f32 {
        use PokemonType::*;
        if move_type == Water {
          if opponent_type == Fire {
            return 2f32;
          }
          else if opponent_type == Grass {
            return 0.5f32;
          }
        }
        1f32
      }
      ```

      But there's a better way to make these comparisons...

  - type: title
    title: Match Statement
  - content: |
      # What is it?
      Like a switch statement, but more dynamic.

      ### Format
      ```rust
      match VALUE {
        PATTERN => EXPRESSION,
      }
      ```
  - content: |
      # Examples
      Like a switch statement
      ```rust
      let x = 1;
      match x {
        1 => "one",
        2 => "two",
        _ => "other",
      }
      ```
  - content: |
      # Examples
      Multiple cases
      ```rust
      let x = 1;
      match x {
        1 | 2 => "one or two",
        _ => "other",
      }
      ```
  - content: |
      # Examples
      Ranges
      ```rust
      let x = 1;
      match x {
        1..=5 => "one through five",
        _ => "other",
      }
      ```
      ```rust
      let x = 'c';
      match x {
        'a'..='j' => "a-j",
        'k'..='z' => "k-z",
        _ => "other",
      }
      ```
  - content: |
      # Examples
      Multiple values
      ```rust
      let a = 7;
      let b = 4;
      match (a, b) {
          (9, 3) => println!("a == 9, b == 3"),
          (2, _) => println!("a == 2, b ignored"),
          (_, 4) => println!("b == 4, a ignored"),
          _ => println!("other"),
      }
      ```
  - content: |
      # Examples
      Struct Destructuring
      ```rust
      let p = Point { x: 0, y: 7 };
      match p {
          Point { x, y: 0 } => println!("On the x axis at {}", x),
          Point { x: 0, y } => println!("On the y axis at {}", y),
          Point { x: 5, .. } => println!("all other fields ignored"),
          Point { x, y } => println!("On neither axis: ({}, {})", x, y),
      }
      ```
  - content: |
      # Examples
      Error Handling using the generic type `Result<T, E>`
      ```rust
      let f = File::open("hello.txt");
      let f = match f {
        Ok(file) => file,
        Err(error) => panic!("Can't open file: {:?}", error)
      }
      ```

  - content: |
      # Using a `match` statement in our code

      ```rust
      pub fn get_damage_multiplier(move_type: PokemonType, opponent_type: PokemonType) -> f32 {
        use PokemonType::*;
        match (move_type, opponent_type) {
          (Water, Fire) => 2f32,
          (Water, Grass) => 0.5f32,
          (Fire, Grass) => 2f32,
          (Fire, Water) => 0.5f32,
          (Grass, Water) => 2f32,
          (Grass, Fire) => 0.5f32,
          _ => 1f32,
        }
      }
      ```

  - type: title
    title: Documentation and Testing
  - content: |
      # Documentation and Testing
      Rust comes with a documentation generator and testing framework right out of the box.

      Use `///` to add a doc comment

      ```rust
      /// Gets the damage multiplier for a given type matchup.
      pub fn get_damage_multiplier(move_type: PokemonType, opponent_type: PokemonType) -> f32 {
      ```

      Docs can be generated with:
      ```bash
      cargo doc
      ```

  - content: |
      # Documentation and Testing
      Add an example usage of the function with 3 backticks: `\``

      ```rust
      /// Gets the damage multiplier for a given type matchup.
      /// ```
      /// # use pokelib::*;
      /// assert_eq!(get_damage_multiplier(PokemonType::Water, PokemonType::Fire), 2f32);
      /// ```
      pub fn get_damage_multiplier(move_type: PokemonType, opponent_type: PokemonType) -> f32 {
      ```

      Examples automatically get run as tests when you run tests.
      ```bash
      cargo test
      ```

  - content: |
      # Documentation and Testing
      To make tests, just mark your test functions with the `test` attribute.
      ```rust
      #[test]
      fn test_get_damage_multiplier() {
        use PokemonType::*;
        assert_eq!(get_damage_multiplier(Water, Fire), 2f32);
        assert_eq!(get_damage_multiplier(Grass, Fire), 0.5f32);
      }
      ```

  - content: |
      # Your turn!

      Join the repl.it in chat and work together!

      ## Tasks
      1. Let `Pokemon` have 1 or 2 elemental types.
        - *Hint: You'll need to add a new enum. You don't need to add any fields to `Pokemon`.*
      2. Make `get_damage_multiplier` work for dual type Pokemon.
      3. Finish implementing the existing type weaknesses and implement these new types: (assume gen 6+)
        - Ice
        - Ground
        - Rock
      4. Implement the `Display` trait for `Pokemon` to pass the test case.

  - content: |
      # Wanna learn more?
      Rust book: https://doc.rust-lang.org/book/
